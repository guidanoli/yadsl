name: Continuous Integration

on: [push]

jobs:
  build:
    strategy:
      matrix:
        build_type: ['Release', 'Debug']
        lua_version: ["5.4.3"]
        python_version: ["3.6-dev", "3.7-dev", "3.8-dev", "3.9-dev"]
        cmake_version: ["3.18.5"]
    
    runs-on: ubuntu-18.04
    
    env:
      LIBDIR: ${{ matrix.build_type == 'Debug' && 'lib64d' || 'lib64' }}
      PYTHONVER: ${{ format(matrix.build_type == 'Debug' && '{0}-debug' || '{0}', matrix.python_version) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create cache folder
        run: mkdir .cache

      - name: Cache Lua
        id: cache-lua
        uses: actions/cache@v2
        with:
          path: .cache/lua-${{ matrix.lua_version }}
          key: ${{ runner.os }}-lua-${{ matrix.lua_version }}-v2

      - name: Compile Lua
        if: steps.cache-lua.outputs.cache-hit != 'true'
        run: |
          cd .cache
          curl -R -O "http://www.lua.org/ftp/lua-${{ matrix.lua_version }}.tar.gz"
          tar zxf "lua-${{ matrix.lua_version }}.tar.gz"
          cd "lua-${{ matrix.lua_version }}"
          sed 's/\(^CFLAGS.*\)/\1 -fPIC/' -i src/Makefile
          make linux

      - name: Install Lua
        run: sudo make install -C ".cache/lua-${{ matrix.lua_version }}"

      - name: Test Lua
        run: lua -v 2>&1 | grep -F "${{ matrix.lua_version }}"

      - name: Install pyenv
        run: |
          git clone https://github.com/pyenv/pyenv.git ~/.pyenv
          echo "$HOME/.pyenv/bin" >> "$GITHUB_PATH"

      - name: Get pyenv root path
        run: echo "PYENV_PATH=$(pyenv root)" >> "$GITHUB_ENV"

      - name: Cache Python
        id: cache-python
        uses: actions/cache@v2
        with:
          path: ${{ env.PYENV_PATH }}/versions/${{ env.PYTHONVER }}
          key: ${{ runner.os }}-python-${{ env.PYTHONVER }}

      - name: Compile Python in Release
        if: steps.cache-python.outputs.cache-hit != 'true' && matrix.build_type != 'Debug'
        run: CONFIGURE_OPTS=--enable-shared pyenv install "${{ matrix.python_version }}"

      - name: Compile Python in Debug
        if: steps.cache-python.outputs.cache-hit != 'true' && matrix.build_type == 'Debug'
        run: CONFIGURE_OPTS=--enable-shared pyenv install --debug "${{ matrix.python_version }}"

      - name: Install Python
        run: pyenv local "${{ env.PYTHONVER }}"

      - name: Test Python
        run: pyenv exec python --version 2>&1 | grep -F "$(echo ${{ matrix.python_version }} | tr -cd '[0-9.]')"

      - name: Install Python packages
        run: |
          pyenv exec pip install --upgrade pip
          pyenv exec pip install -r src/yadsl/dev-requirements.txt

      - name: Cache CMake
        id: cache-cmake
        uses: actions/cache@v2
        with:
          path: .cache/cmake-${{ matrix.cmake_version }}
          key: ${{ runner.os }}-cmake-${{ matrix.cmake_version }}

      - name: Compile CMake
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          cd .cache
          wget "https://github.com/Kitware/CMake/releases/download/v${{ matrix.cmake_version }}/cmake-${{ matrix.cmake_version }}.tar.gz"
          tar -zxvf "cmake-${{ matrix.cmake_version }}.tar.gz"
          cd "cmake-${{ matrix.cmake_version }}"
          ./bootstrap
          make

      - name: Install CMake
        run: sudo make install -C ".cache/cmake-${{ matrix.cmake_version }}"

      - name: Test CMake
        run: cmake --version 2>&1 | grep -F "${{ matrix.cmake_version }}"

      - name: Configure build environment
        run: cmake -B build "-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}" -DYADSL_LUA_SUPPORT=1 -DYADSL_PYTHON_SUPPORT=1 -DYADSL_BUILD_ALL_TESTS=1 "-DPython_EXECUTABLE:FILEPATH=$(pyenv which python)"

      - name: Build
        run: cmake --build build --config "${{ matrix.build_type }}" --target all

      - name: Test C
        run: CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --config "${{ matrix.build_type }}" --target test

      - name: Test Python
        run: PYTHONPATH="$LIBDIR/python" pyenv exec pytest -s src --ignore=src/yadsl/templates

      - name: Test Lua
        run: |
          cd src
          LUA_CPATH="../$LIBDIR/lua/?.so" lua yadsl/run.lua
